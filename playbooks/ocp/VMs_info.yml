
---
- name: Set Up DHCP & Haproxy
  hosts: 192.168.1.122
  gather_facts: true
  vars_files:
    - configs.yml
  tasks:
    - name: content of set_stats
      debug:
        var: vms
        
    - name: Ensure DHCP is installed
      package:
        name: dhcp-server
        state: present

    - name: Extract VM details using a loop
      vars:
        ocp_fqdn: "{{ OCP_CLUSTER_NAME }}.{{ OCP_BASE_DOMAIN }}"
        dhcp_hosts: []
      loop: "{{ vms.results }}"
      when: item.instance.hw_power_status != 'poweredOn'
      set_fact:
        dhcp_hosts: >
          {{
            dhcp_hosts + [{
              'name': item.instance.hw_name if item.instance.hw_name is defined else 'unknown_hostname',
              'hostname': (item.instance.hw_name ~ '.' ~ ocp_fqdn) if item.instance.hw_name is defined else 'unknown_hostname',
              'mac_address': item.instance.hw_eth0.macaddress if item.instance.hw_eth0.macaddress is defined else 'unknown_mac',
              'ipv4_address': configs[item.instance.hw_name]['ipv4_address'] if item.instance.hw_name in configs else 'unknown_ip'
            }]
            if item.instance.hw_power_status != 'poweredOn' else dhcp_hosts
          }}
      
    - name: Generate DHCP configuration
      template:
        src: dhcp_config.j2
        dest: /etc/dhcp/dhcpd.conf
      vars:
        dhcp_hosts: "{{ dhcp_hosts }}"
        
    - name: Display the complete DHCP configuration
      command: cat /etc/dhcp/dhcpd.conf
      register: dhcp_config_content

    - name: Output the DHCP configuration
      debug:
        msg: "{{ dhcp_config_content.stdout }}"    
        
    # - name: Start and enable DHCP service
    #   systemd:
    #     name: dhcpd
    #     state: started
    #     enabled: yes

    # - name: Restart DHCP service to apply configuration
    #   systemd:
    #     name: dhcpd
    #     state: restarted    
