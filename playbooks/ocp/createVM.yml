# ---
- name: Create a VM with custom resources
  hosts: localhost
  gather_facts: false
  vars_files:
    - vcenter_vars.yml
    - vm_list.yml
  tasks:    
    - name: Debug vm_list
      debug:
        var: vm_details
    - name: Create VMs dynamically
      community.vmware.vmware_guest:
        hostname: "{{ vcenter.hostname }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: "{{ validate_certs }}"
        datacenter: "{{ datacenter.name }}"
        cluster: "{{ datacenter.cluster }}"
        folder: "{{ item.folder }}"
        template: "{{ item.template }}"
        name: "{{ item.name }}"
        guest_id: "{{ item.guest_id }}"
        state: "{{ item.state}}"
        wait_for_ip_address: "{{ item.wait_for_ip_address }}"
        customization: "{{ item.customization}}"
        hardware:
          num_cpus: "{{ item.num_cpus }}"
          memory_mb: "{{ item.memory_mb }}"
        networks: "{{ item.networks }}"
        disk: "{{ item.disk}}"
      loop: "{{ vm_details }}"
      loop_control:
        label: "{{ item.name }}"
      register: vm


    - name: Add Helper host to Inventory
      add_host:
        name: "{{ host_name }}"
        groups:
        - helper
        host_vars:
          ansible_host: "192.168.1.122"
          ansible_user: "root"
          ansible_password: "root"
          ansible_ssh_pass: "root"
      vars:
        host_name: "helper"
      regiter: helper  
        
    - name: set a var using set_stats
      ansible.builtin.set_stats:
        data:
          vms: "{{ vm }}" 
          helper: "helper"
          

      
    # - name: Add Helper host to Inventory
    #   add_host:
    #     name: "{{ (vm.results | selectattr('instance.hw_power_status', 'equalto', 'poweredOn') | selectattr('instance.ipv4', 'defined') | map(attribute='instance.ipv4') | first) }}"
    #     groups: helper
    #     ansible_host: "{{ (vm.results | selectattr('instance.hw_power_status', 'equalto', 'poweredOn') | selectattr('instance.ipv4', 'defined') | map(attribute='instance.ipv4') | first) }}"
    #     ansible_user: root
    #     ansible_password: root
    #     ansible_ssh_pass: root
    #   loop: "{{ vm.results | selectattr('instance', 'defined') }}"
    #   ignore_errors: true

